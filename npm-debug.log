0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish', '.' ]
2 info using npm@2.14.9
3 info using node@v5.3.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/cloud/work/cloud/node-bigpipe',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/cloud/.npm/node-bigpipe/1.0.0/package.tgz not in flight; packing
9 info lifecycle node-bigpipe@1.0.0~prepublish: node-bigpipe@1.0.0
10 silly lifecycle node-bigpipe@1.0.0~prepublish: no script for prepublish, continuing
11 verbose tar pack [ '/Users/cloud/.npm/node-bigpipe/1.0.0/package.tgz',
11 verbose tar pack   '/Users/cloud/work/cloud/node-bigpipe' ]
12 verbose tarball /Users/cloud/.npm/node-bigpipe/1.0.0/package.tgz
13 verbose folder /Users/cloud/work/cloud/node-bigpipe
14 verbose addLocalTarball adding from inside cache /Users/cloud/.npm/node-bigpipe/1.0.0/package.tgz
15 silly cache afterAdd node-bigpipe@1.0.0
16 verbose afterAdd /Users/cloud/.npm/node-bigpipe/1.0.0/package/package.json not in flight; writing
17 verbose afterAdd /Users/cloud/.npm/node-bigpipe/1.0.0/package/package.json written
18 silly publish { name: 'node-bigpipe',
18 silly publish   version: '1.0.0',
18 silly publish   description: 'bigpipe for nodejs,express,sails,thinkjs,node-web,modular bigpipe for node',
18 silly publish   main: 'back-end/Bigpipe.js',
18 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'git+https://github.com/xunuoi/sails-bigpipe.git' },
18 silly publish   keywords:
18 silly publish    [ 'node-bigpipe',
18 silly publish      'bigpipe',
18 silly publish      'node-web',
18 silly publish      'express',
18 silly publish      'sails',
18 silly publish      'thinkjs',
18 silly publish      'bigpipe-node',
18 silly publish      'bigpipe' ],
18 silly publish   author: { name: 'Lucas X' },
18 silly publish   license: 'MIT',
18 silly publish   bugs: { url: 'https://github.com/xunuoi/sails-bigpipe/issues' },
18 silly publish   homepage: 'https://github.com/xunuoi/sails-bigpipe#readme',
18 silly publish   readme: '# node-bigpipe\n\n### 简介\n- Bigpie for nodejs, frameworks like Express, Sails, ThinkJS\n- Simple API: start, pipe, end。 Api简单好用\n- 服务器端API基于Promise\n\n\n### 安装\n- 拷贝到项目目录或者通过npm安装模块：`npm install node-bigpipe --save-dev`\n- 服务端调用： `import {Bigpipe} from \'./Bigpipe` 或者 `import {Bigpipe} from \'node-bigpipe`\n- 前端调用： 引入`jQuery`和`static`目录下的`mo.bigpipe.es5.js`\n- 另外前端js完全可以自己封装，不需要依赖j`Query`和提供的`mo.bigpipe.es5.js`\n\n\n### 使用\n\n* 服务端，首先构造对应的pipe块，需要返回一个promise\n* start这个方法来启动pipe，渲染一个基本html框架\n* pipe方法来传输之前构造的pipe块组成的数组\n* end方法来结束pipe传输，http请求结束\n\n\n\n### 服务端API\n- `bigpipe.start(viewPath, [data])`: 开始\n- `bigpipe.pipe(promiseList)`：传输\n- `bigpipe.end([onEndFn])`： 结束\n- `bigpipe.render(selector, htmlData)`： 向html的容器填充htmlData,相当于前端执行了$(selector).html(htmlData)\n- `bigpipe.append(selector, htmlData)`： 向html的容器追加htmlData，相当于前端$(selector).append(htmlData)\n- `bigpipe.fire(eventName, data)`: 触发前端的eventName事件，前端需要自定义好事件函数，来处理data\n\n### 浏览器端APi\n- `bigpipe.on(eventName).then(data=>{ // deal with data ...  })`: 订阅eventName事件并通过then添加处理函数\n- `bigpie.fire/render/append` 同服务器端api介绍\n\n\n### 代码示例\n\n- 构造pipe块，需要返回一个Promise对象，这个pipe的函数会被传入bigpipe对象参数(下面的bp就是)\n\n````Javascript\nfunction tagPipe(bp){\n    return new Promise((resolve, reject)=>{\n        let rdata = {\n            \'tag\': \'your data\'\n        }\n\n        // 模拟异步数据查询和输出\n        setTimeout(()=>{\n            let html = \'<div><span>TagA</span><span>TagB</span><span>TagC</span><span>TagD</span></div>\'\n\n            let pipeData = {\n                \'html\': html,\n                \'message\': \'for tag pipe html\'\n                \'css\': [\'a.css\'],\n                \'js\': [\'b.js\'],\n            }\n            // 此处\'#tag\'对应前端html的容器的选择器\n            bp.fire(\'tag\', pipeData)\n            resolve()\n        }, 3000)\n    })\n}\n\n```\n\n- 在路由的请求处理函数中，启动pipe，然后结束。\n\n````Javascript\n\n    index (req, res, next, page=1){\n        let bp = new Bigpipe(\'karatBP\', req, res)\n\n        /**\n         * bp.start会默认将 _bigpipe_id，也就是此处的\'karatBP\' 参数渲染到模板中。\n         * 因此前端home模板可以根据这个参数，自动new Bigpipe(\'{{_bigpipe_id}}\'),这样浏览器端可以自动生\n         * 成对应的bigpipe对象，在浏览器端window对象会自动添加一个变量名为_bigpipe_id也就是 karatBP 的\n         * 属性，可以全局访问\n         */\n        \n        bp.start(\'view/home\')\n        .pipe([\n            articlePipe,\n            tagPipe,\n            \n            // other ...\n        ])\n        .end()\n    },\n\n```\n\n- 前端代码\n\n````Html\n<script type="text/javascript">\n// 此处的\'karatBP\'对应服务端Bigpipe实例的id,会在window对象自动添加karatBP这个属性\nnew Bigpipe(\'karatBP\')\n\n// 或者可以自动从数据中获取的Bigpipe的id,如： new Bigpipe(\'{{_bigpipe_id}}\')\n</script>\n```\n\n- 完整服务端代码 TestController.js：\n\n````Javascript\n\nfunction tagPipe(bp){\n    return new Promise((resolve, reject)=>{\n        let rdata = {\n            \'tag\': \'your data\'\n        }\n\n        // 模拟异步数据查询和输出\n        setTimeout(()=>{\n            let html = \'<div><span>TagA</span><span>TagB</span><span>TagC</span><span>TagD</span></div>\'\n\n            let pipeData = {\n                \'html\': html,\n                \'message\': \'for tag pipe html\'\n                \'css\': [\'a.css\'],\n                \'js\': [\'b.js\'],\n            }\n            // 此处\'#tag\'对应前端html的容器的选择器\n            bp.fire(\'tag\', pipeData)\n            resolve()\n        }, 3000)\n    })\n}\n\n\nfunction articlePipe(bp){\n    return new Promise((resolve, reject)=>{\n        let rdata = {\n            \'article\': \'your data\'\n        }\n\n        bp.res.render(\'view/article\', rdata, (err, html)=>{\n\n            bp.render(\'.wrap > .content\', html)\n            resolve()\n        })\n    })\n}\n\n\n// 此处index函数应该被框架的route来绑定\nexport default {\n\n    index (req, res, next, page=1){\n        let bp = new Bigpipe(\'karatBP\', req, res)\n\n        bp.start(\'view/home\')\n        .pipe([\n            articlePipe,\n            tagPipe,\n            \n            // other ...\n        ])\n        .end()\n    },\n}\n```\n\n- 完整前端代码\n````HTML\n<script type="text/javascript" src="/static/jquery.min.js"></script>\n<script type="text/javascript" src="/static/mo.bigpipe.es5.js"></script>\n<script type="text/javascript">\nnew Bigpipe(\'karatBP\')\n\n// 绑定自定义的pipe处理事件,对应服务端的bp.fire(\'tag\', data)\nkaratBP.on(\'tag\')\n.then(function (data) {\n    var pipeData = JSON.parse(data)\n    console.log(pipeData.message)\n    $(\'#tag\').html(pipeData.html)\n})\n</script>\n```\n\n### 新增对ThinkJS的支持\n\n使用时服务端代码略有不同:\n\n* new Bigpie时需要多传入一个this参数\n* 其他API以及前端部分无变化\n* 关于ThinkJS框架可访问: [https://thinkjs.org](https://thinkjs.org)\n\n\n\n````Javascript\n\nexport default class extends Base {\n  indexAction(){\n    let http = this.http;\n    // 这里需要比Express/Sails框架，额外传入一个this参数\n    let bp = new Bigpipe(\'thinkBP\', http.req, http.res, this)\n\n    // start默认参数是ThinkJS的默认模板文件index.html\n    // 其他使用方法保持一致\n    bp.start() // 或者 bp.sart(\'xxx\')\n    .pipe([\n        tagPipe,\n        testPipe\n        \n        // other ...\n    ])\n    .end()\n \n  }\n}\n```\n\n\n### 说明\n\n完整demo代码见文件\n\n\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: '3227b8fed926ea8ef1f1632170657f0a97076d62',
18 silly publish   _id: 'node-bigpipe@1.0.0',
18 silly publish   _shasum: 'cb445eb5b73caff18e4da43374e031d261267665',
18 silly publish   _from: '.' }
19 verbose getPublishConfig undefined
20 silly mapToRegistry name node-bigpipe
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/node-bigpipe
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading /Users/cloud/.npm/node-bigpipe/1.0.0/package.tgz
26 verbose request uri https://registry.npmjs.org/node-bigpipe
27 verbose request sending authorization for write operation
28 info attempt registry request try #1 at 11:49:52
29 verbose request using bearer token for auth
30 verbose request id 7348384ee8ed0837
31 http request PUT https://registry.npmjs.org/node-bigpipe
32 http 403 https://registry.npmjs.org/node-bigpipe
33 verbose headers { 'content-type': 'application/json',
33 verbose headers   'cache-control': 'max-age=300',
33 verbose headers   'content-length': '95',
33 verbose headers   'accept-ranges': 'bytes',
33 verbose headers   date: 'Sun, 14 Feb 2016 03:49:48 GMT',
33 verbose headers   via: '1.1 varnish',
33 verbose headers   connection: 'keep-alive',
33 verbose headers   'x-served-by': 'cache-sjc3651-SJC',
33 verbose headers   'x-cache': 'MISS',
33 verbose headers   'x-cache-hits': '0',
33 verbose headers   'x-timer': 'S1455421787.774394,VS0,VE503' }
34 verbose request invalidating /Users/cloud/.npm/registry.npmjs.org/node-bigpipe on PUT
35 error publish Failed PUT 403
36 verbose stack Error: "You cannot publish over the previously published version 1.0.0." : node-bigpipe
36 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
36 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
36 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
36 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:198:22)
36 verbose stack     at emitTwo (events.js:87:13)
36 verbose stack     at Request.emit (events.js:172:7)
36 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1082:10)
36 verbose stack     at emitOne (events.js:82:20)
36 verbose stack     at Request.emit (events.js:169:7)
36 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1009:12)
37 verbose statusCode 403
38 verbose pkgid node-bigpipe
39 verbose cwd /Users/cloud/work/cloud/node-bigpipe
40 error Darwin 14.5.0
41 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish" "."
42 error node v5.3.0
43 error npm  v2.14.9
44 error code E403
45 error "You cannot publish over the previously published version 1.0.0." : node-bigpipe
46 error If you need help, you may report this error at:
46 error     <https://github.com/npm/npm/issues>
47 verbose exit [ 1, true ]
